=========================================
Workspace Related Objects and Their Forms
=========================================

Before we get started, we need to import the required classes and set up
the test environment.
::

    >>> from pmr2.app.workspace.browser import browser
    >>> from pmr2.testing.base import TestRequest
    >>> from plone.z3cform.tests import setup_defaults
    >>> from pmr2.app.workspace.content import *
    >>> self.portal['workspace'] = WorkspaceContainer()
    >>> self.portal.workspace
    <WorkspaceContainer at /plone/workspace>
    >>> self.portal.workspace['test'] = Workspace('test')
    >>> self.portal.workspace.test
    <Workspace at /plone/workspace/test>
    >>> self.portal.workspace.test.storage = u'dummy_storage'
    >>> request = TestRequest()

We will test the Repository Listing form first.  As the workspace path
has not been created, the listing will raise an exception which should
not be passed to the client but show an error message.
::

    >>> repolist_page = browser.WorkspaceContainerRepoListing(
    ...     self.portal.workspace, request)
    >>> html = repolist_page()
    >>> 'Workspace path is missing. Please notify administrator.' in html
    True

Once the required paths are created on the file system, the raw 
repository listing should render fine.
::

    >>> workspace_root = self.pmr2.createDir(self.portal.workspace)
    >>> html = repolist_page()
    >>> 'test' in html
    True
    >>> 'Error' in html
    True
    >>> 'Valid' in html
    False

As the VCS instances are added to the file system, they should also
show up on the table.
::

    >>> from os.path import join
    >>> from os import mkdir
    >>> mkdir(join(workspace_root, 'ham'))
    >>> html = repolist_page()
    >>> 'ham' in html
    True
    >>> 'Not Found' in html
    True

Now we create the repository for test.  It should no longer appear 
broken.
::

    >>> test_workspace = self.pmr2.createDir(self.portal.workspace.test)
    >>> html = repolist_page()
    >>> 'test' in html
    True
    >>> 'Error' in html
    False
    >>> 'Valid' in html
    True

The edit form for the Workspace should work.
::

    >>> testform = browser.WorkspaceEditForm(
    ...     self.portal.workspace.test, request)
    >>> html = testform()
    >>> 'Title' in html
    True
    >>> 'Description' in html
    True

Let's try to edit the Workspace with that form.
::

    >>> request = TestRequest(
    ...     form={
    ...         'form.widgets.title': u'Delicious Eggs',
    ...         'form.widgets.description': u'Test\nWorkspace',
    ...         'form.widgets.storage': [u'dummy_storage'],
    ...         'form.buttons.apply': 1,
    ...     })
    >>> testform = browser.WorkspaceEditForm(
    ...     self.portal.workspace.test, request)
    >>> testform.update()

Workspace is updated.
::

    >>> self.portal.workspace.test.title
    u'Delicious Eggs'
    >>> self.portal.workspace.test.description
    u'Test\nWorkspace'

Now we if try to create the ham workspace object using the 
WorkspaceStorageCreateForm, it will fail because the ham Storage object
already exists.
::

    >>> request = TestRequest(
    ...     form={
    ...         'form.widgets.id': u'ham',
    ...         'form.widgets.name': u'Tasty Ham',
    ...         'form.widgets.storage': [u'dummy_storage'],
    ...         'form.buttons.add': 1,
    ...     })
    ... 
    >>> testform = browser.WorkspaceStorageCreateForm(
    ...     self.portal.workspace, request)
    >>> html = testform()
    >>> 'A previous workspace' in html
    True

In this case, we need to use the standard add form which only creates
the workspace object and not the storage.
::

    >>> testform = browser.WorkspaceAddForm(
    ...     self.portal.workspace, request)
    >>> testform.update()

There should now be no repository objects without its respective
Workspace object.
::

    >>> html = repolist_page()
    >>> 'ham' in html
    True
    >>> 'Not Found' in html
    False

We can create a completely new workspace using the form we failed to use
earlier.
::

    >>> request = TestRequest(
    ...     form={
    ...         'form.widgets.id': u'cake',
    ...         'form.widgets.title': u'Delicious Cake',
    ...         'form.widgets.storage': [u'dummy_storage'],
    ...         'form.buttons.add': 1,
    ...     })
    ... 
    >>> testform = browser.WorkspaceStorageCreateForm(
    ...     self.portal.workspace, request)
    >>> testform.update()
    >>> self.portal.workspace.cake.title == u'Delicious Cake'
    True
    >>> self.portal.workspace.cake.storage == u'dummy_storage'
    True

Make sure the storage behind this workspace is set up.
::

    >>> import zope.component
    >>> from pmr2.app.workspace.interfaces import IStorage
    >>> cake = self.portal.workspace.cake
    >>> cake_store = zope.component.queryAdapter(cake, IStorage)
    >>> cake_store.file('status') == 'is a lie.'
    True

See if the page renders with expected output.
::

    >>> request = TestRequest()
    >>> testpage = browser.FilePage(
    ...     self.portal.workspace.cake, request)
    >>> testpage.update()
    >>> result = testpage()
    >>> 'Location: Delicious Cake @ 1 /' in testpage.label
    True
    >>> '<th>Filename</th>' in result
    True
    >>> 'status' in result
    True

The log page should render, too.
::

    >>> request = TestRequest()
    >>> testpage = browser.WorkspaceLog(
    ...     self.portal.workspace.cake, request)
    >>> result = testpage()
    >>> '<th>Log</th>' in result
    True

Now the short log page should render, too.
::

    >>> request = TestRequest()
    >>> testpage = browser.WorkspaceShortlog(
    ...     self.portal.workspace.cake, request)
    >>> result = testpage()
    >>> '<th>Log</th>' in result
    True

There is an RSS page for the log, it should render correctly.
::

    >>> request = TestRequest()
    >>> testpage = browser.WorkspaceLogRss(
    ...     self.portal.workspace.test, request)
    >>> items = list(testpage.items())
    >>> items[0]['pubDate'] == 'Fri, 18 Mar 2005 23:12:19 +0000'
    True
    >>> result = testpage()
    >>> print result
    <?xml version="1.0" encoding="utf-8"?>
    <rss version="2.0">
      <channel>
        <link>http://nohost/plone/workspace/test</link>
        <language>en-us</language>
        <title>Delicious Eggs</title>
        <description>Test
    Workspace</description>
    ...
        <item>
          <title>A:dir1/f1</title>
          <link>http://nohost/plone/workspace/test/@@file/2</link>
          <description>A:dir1/f1
    A:dir1/f2
    C:file3
    D:file1</description>
          <author>&amp;#112;&amp;#109;...
          <pubDate>Fri, 18 Mar 2005 20:27:43 +0000</pubDate>
        </item>
    ...
    </rss>


Main page should render fine, too.
::

    >>> request = TestRequest()
    >>> testpage = browser.WorkspacePage(
    ...     self.portal.workspace.cake, request)
    >>> result = testpage()
    >>> print result
    <h3>Summary</h3>
    <dl>
    <BLANKLINE>
    <BLANKLINE>
    <BLANKLINE>
      <dt>Owner</dt>
      <dd>&#32;&#60;&#62;</dd>
    <BLANKLINE>
      <dt>URI for dummy_storage clone/pull/push</dt>
      <dd><a href="http://nohost/plone/workspace/cake">http://nohost/plone/workspace/cake</a></dd>
    <BLANKLINE>
    </dl>
    <h4>Most recent changes</h4>
    <div>
    <div><table>
      <thead>
        <tr>
          <th>Date</th>
          <th>Author</th>
          <th>Log</th>
          <th>Options</th>
          <th>Exposure</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>2005-03-18 17:43:07</td>
          <td>pmr2.teststorage &lt;pmr2.tester@example.com&gt;</td>
          <td>A:dir1/dummy.txt</td>
          <td><a href="http://nohost/plone/workspace/cake/@@file/1/">[manifest]</a>
    <a href="http://nohost/plone/workspace/cake/@@archive/1/dummy">[dummy]</a></td>
          <td></td>
        </tr>
        <tr>
          <td>2005-03-18 14:58:31</td>
          <td>pmr2.teststorage &lt;pmr2.tester@example.com&gt;</td>
          <td>A:dir1/dir2/file.xml
    A:null
    A:status
    A:test.png
    A:test.xml</td>
          <td><a href="http://nohost/plone/workspace/cake/@@file/0/">[manifest]</a>
    <a href="http://nohost/plone/workspace/cake/@@archive/0/dummy">[dummy]</a></td>
          <td></td>
        </tr>
      </tbody>
    </table></div>
    </div>
    <BLANKLINE>

---------------------
Protocol Level Access
---------------------

The other important feature this must provide is the ability to allow
interaction with the underlying storage backend using client software.
Since Zope and Plone will generally not understand the post values
introduced by the custom backends behind workspaces as there will be no
corresponding form objects created for them, we will pass the request
object directly to one of the handlers using the protocol method in the
backend's respective utility class through the protocol views which are
registered for both read and write.  Depending on the method of the
request, protocol_read or the protocol_write will be invoked.  We can
test this out using the dummy workspace.
::

    >>> context = self.portal.workspace.cake
    >>> request = TestRequest(form={'cmd': 'revcount'})
    >>> view = browser.WorkspacePage(context, request)
    >>> revcount = view()
    >>> print revcount
    2

The output is directly generated by the underlying protocol.

If we were to post data, this should not present a problem using the
same user account that created this object.
::

    >>> context = self.portal.workspace.cake
    >>> request = TestRequest(form={'cmd': 'update'})
    >>> request.method = 'POST'
    >>> view = browser.WorkspacePage(context, request)
    >>> updated = view()
    >>> print updated
    Updated

Before moving on, this object should be published.
::

    >>> from Products.CMFCore.utils import getToolByName
    >>> self.setRoles(('Manager',))
    >>> wft = getToolByName(self.portal, 'portal_workflow')
    >>> wft.doActionFor(self.portal.workspace.cake, 'publish')

Now if we were to use a different user account, the main view should 
have been the same as the original result from earlier.
::

    >>> uf = self.folder.acl_users
    >>> uf.userFolderAddUser('test_user_2_', 'password', [], [])
    >>> self.logout()
    >>> self.login('test_user_2_')
    >>> context = self.portal.workspace.cake
    >>> request = TestRequest()
    >>> view = browser.WorkspacePage(context, request)
    >>> view() == result
    True

Reading using the protocol layer shouldn't present an issue.
::

    >>> context = self.portal.workspace.cake
    >>> request = TestRequest(form={'cmd': 'revcount'})
    >>> view = browser.WorkspacePage(context, request)
    >>> revcount = view()
    >>> print revcount
    2

However, writing to the protocol should fail as the user has no role or
rights to the protocol write.
::

    >>> context = self.portal.workspace.cake
    >>> request = TestRequest(form={'cmd': 'update'})
    >>> request.method = 'POST'
    >>> view = browser.WorkspacePage(context, request)
    >>> result = view()
    Traceback (most recent call last):
    ...
    Unauthorized: ...

We could however grant this permission to our new user.
::

    >>> context.manage_setLocalRoles('test_user_2_', ['WorkspacePusher'])
    >>> request = TestRequest(form={'cmd': 'update'})
    >>> request.method = 'POST'
    >>> view = browser.WorkspacePage(context, request)
    >>> print view()
    Updated

We are done with this other user; log the original user back on.
::

    >>> self.logout()
    >>> self.login('test_user_1_')

----------------
Archive Download
----------------

One important feature is to allow users to download the entire archive
based on what is supported by the particular backend.  Calling the view
with the proper subpaths should return the desired archive.

We reuse the path in the previous example, but this time the view will
return just the contents.
::

    >>> from cPickle import loads
    >>> subpath = ['0', 'dummy']
    >>> page = self.traverse(self.portal.workspace.cake, 
    ...                      browser.WorkspaceArchive, subpath)
    >>> page.update()
    >>> result = page()
    >>> d = loads(result)
    >>> sorted(d.keys())
    ['dir1/dir2/file.xml', 'null', 'status', 'test.png', 'test.xml']
    >>> page.request.response.getHeader('Content-length')
    '2317'
    >>> page.request.response.getHeader('Content-type')
    'application/x-dummy'

---------------
File Info Pages
---------------

Subdirectories should work along with a subpath to access the 
subdirectories in place, and we do need a proper revision for the
request_subpath.
::

    >>> wkspc = self.portal.workspace.test
    >>> request = TestRequest()
    >>> request['rev'] = '2'
    >>> request['request_subpath'] = ['dir1']
    >>> testpage = browser.FilePage(wkspc, request)
    >>> testpage.update()
    >>> result = testpage()
    >>> 'Location: Delicious Eggs @ 2 / dir1' in testpage.label
    True
    >>> 'f1' in result
    True
    >>> 'f2' in result
    True

Nested works too.
::

    >>> wkspc = self.portal.workspace.test
    >>> request = TestRequest()
    >>> request['rev'] = '3'
    >>> request['request_subpath'] = ['dir1', 'dir2']
    >>> testpage = browser.FilePage(wkspc, request)
    >>> testpage.update()
    >>> result = testpage()
    >>> 'Location: Delicious Eggs @ 3 / dir1 / dir2' in testpage.label
    True
    >>> 'f1' in result
    True
    >>> 'f2' in result
    True

Bad revision results in not found.
::

    >>> request = TestRequest()
    >>> request['rev'] = '1010'
    >>> request['request_subpath'] = ['dir1']
    >>> testpage = browser.FilePage(wkspc, request)
    >>> testpage.update()
    Traceback (most recent call last):
    ...
    HTTPNotFound: 404 Not Found
    ...

As well as non-existent files at a specific revision.
::

    >>> request = TestRequest()
    >>> request['rev'] = '1'
    >>> request['request_subpath'] = ['dir1']
    >>> testpage = browser.FilePage(wkspc, request)
    >>> testpage.update()
    Traceback (most recent call last):
    ...
    HTTPNotFound: 404 Not Found
    ...

--------------
File rendering
--------------

As there are many different file types that will be stored, it will
greatly benefit the users if the important ones can be rendered in
specific ways.  Images could be rendered and files can be shown with
syntax highlighted.

While the Exposure File Annotations achieved this, it requires an
exposure to be generated first.  The annotators can also be used here to
provide alternate views to workspace files if the correct adapters are
registered.

Here is a test of basic rendering:
::

    >>> subpath = ['1', 'file1']
    >>> page = self.traverse(wkspc, browser.FilePage, subpath)
    >>> result = page()
    >>> 'file1-rev1\nThis test has changed.\n' in result
    True

There may be binary types which will not render properly by clients.
The view should not render it.
::

    >>> subpath = ['0', 'null']
    >>> page = self.traverse(
    ...     self.portal.workspace.cake, browser.FilePage, subpath)
    >>> result = page()
    >>> '\0' in result
    False
    >>> 'application/octet-stream' in result
    True

Invalid revision should raise a 404.
::

    >>> subpath = ['110', 'null']
    >>> page = self.traverse(
    ...     self.portal.workspace.cake, browser.FilePage, subpath)
    >>> result = page()
    Traceback (most recent call last):
    ...
    HTTPNotFound: 404 Not Found
    ...

As well as invalid file entries.
::

    >>> subpath = ['0', 'nullnull']
    >>> page = self.traverse(
    ...     self.portal.workspace.cake, browser.FilePage, subpath)
    >>> result = page()
    Traceback (most recent call last):
    ...
    HTTPNotFound: 404 Not Found
    ...

Or traversing down a file as if a directory
::

    >>> subpath = ['0', 'null', 'null']
    >>> page = self.traverse(
    ...     self.portal.workspace.cake, browser.FilePage, subpath)
    >>> result = page()
    Traceback (most recent call last):
    ...
    HTTPNotFound: 404 Not Found
    ...

---------------
Raw File Viewer
---------------

It must also be possible to directly download or otherwise view a file
that is stored within the workspace as is.  

We reuse the path in the previous example, but this time the view will
return just the contents.
::

    >>> subpath = ['1', 'file1']
    >>> page = self.traverse(wkspc, browser.WorkspaceRawfileView, subpath)
    >>> page.update()
    >>> page()
    'file1-rev1\nThis test has changed.\n'
    >>> page.request.response.getHeader('Content-length')
    '34'
    >>> page.request.response.getHeader('Content-type').startswith(
    ...     'text/plain')
    True

Binary data will be returned as is.
::

    >>> subpath = ['0', 'null']
    >>> page = self.traverse(
    ...     self.portal.workspace.cake, browser.WorkspaceRawfileView, subpath)
    >>> page() == '\0'
    True

Invalid revision should raise a 404.
::

    >>> subpath = ['110', 'null']
    >>> page = self.traverse(
    ...     self.portal.workspace.cake, browser.WorkspaceRawfileView, subpath)
    >>> result = page()
    Traceback (most recent call last):
    ...
    HTTPNotFound: 404 Not Found
    ...

As well as invalid file entries.
::

    >>> subpath = ['0', 'nullnull']
    >>> page = self.traverse(
    ...     self.portal.workspace.cake, browser.WorkspaceRawfileView, subpath)
    >>> result = page()
    Traceback (most recent call last):
    ...
    HTTPNotFound: 404 Not Found
    ...

Or traversing down a file as if a directory.
::

    >>> subpath = ['0', 'null', 'null']
    >>> page = self.traverse(
    ...     self.portal.workspace.cake, browser.WorkspaceRawfileView, subpath)
    >>> result = page()
    Traceback (most recent call last):
    ...
    HTTPNotFound: 404 Not Found
    ...

Obviously, this view cannot render directories at all.  Instead of 
throwing an error we redirect to the FileInfo view.
::

    >>> subpath = ['0']
    >>> page = self.traverse(
    ...     self.portal.workspace.cake, browser.WorkspaceRawfileView, subpath)
    >>> page()
    Traceback (most recent call last):
    ...
    HTTPFound: 302 Found
    The resource was found at
    http://nohost/plone/workspace/cake/file/0

This should work for nested directories.
::

    >>> subpath = ['3', 'dir1', 'dir2']
    >>> page = self.traverse(
    ...     self.portal.workspace.test, browser.WorkspaceRawfileView, subpath)
    >>> page()
    Traceback (most recent call last):
    ...
    HTTPFound: 302 Found
    The resource was found at
    http://nohost/plone/workspace/test/file/3/dir1/dir2

---------------
XML Base Viewer
---------------

As one of the main file types PMR2 originally handle is XML base, there
are various cases where the xml:base must be set in the file such that
the relative links within the file can be resolved when opened from a
user's local machine.
::

    >>> subpath = ['0', 'test.xml']
    >>> page = self.traverse(
    ...     self.portal.workspace.cake, browser.WorkspaceRawfileXmlBaseView,
    ...     subpath)
    >>> result = page()
    >>> 'xml:base="http://nohost/plone/workspace/cake/xmlbase/0/">' in result
    True

Nested dir should also work.
::

    >>> subpath = ['0', 'dir1', 'dir2', 'file.xml']
    >>> page = self.traverse(
    ...     self.portal.workspace.cake, browser.WorkspaceRawfileXmlBaseView,
    ...     subpath)
    >>> result = page()
    >>> 'xml:base="http://nohost/plone/workspace/cake/xmlbase/0/dir1/dir2/">' \
    ...     in result
    True
