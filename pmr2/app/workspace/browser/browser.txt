=========================================
Workspace Related Objects and Their Forms
=========================================

Before we get started, we need to import the required classes and set up
the test environment.
::

    >>> from pmr2.app.workspace.browser import browser
    >>> from pmr2.testing.base import TestRequest
    >>> from plone.z3cform.tests import setup_defaults
    >>> from pmr2.app.workspace.content import *
    >>> self.portal['workspace'] = WorkspaceContainer()
    >>> self.portal.workspace
    <WorkspaceContainer at /plone/workspace>
    >>> self.portal.workspace['test'] = Workspace('test')
    >>> self.portal.workspace.test
    <Workspace at /plone/workspace/test>
    >>> self.portal.workspace.test.storage = u'dummy_storage'
    >>> request = TestRequest()

We will test the Repository Listing form first.  As the workspace path
has not been created, the listing will raise an exception which should
not be passed to the client but show an error message.
::

    >>> repolist_page = browser.WorkspaceContainerRepoListing(
    ...     self.portal.workspace, request)
    >>> html = repolist_page()
    >>> 'Workspace path is missing. Please notify administrator.' in html
    True

Once the required paths are created on the file system, the raw 
repository listing should render fine.
::

    >>> workspace_root = self.pmr2.createDir(self.portal.workspace)
    >>> html = repolist_page()
    >>> 'test' in html
    True
    >>> 'Error' in html
    True
    >>> 'Valid' in html
    False

As the VCS instances are added to the file system, they should also
show up on the table.
::

    >>> from os.path import join
    >>> from os import mkdir
    >>> mkdir(join(workspace_root, 'ham'))
    >>> html = repolist_page()
    >>> 'ham' in html
    True
    >>> 'Not Found' in html
    True

Now we create the repository for test.  It should no longer appear 
broken.
::

    >>> test_workspace = self.pmr2.createDir(self.portal.workspace.test)
    >>> html = repolist_page()
    >>> 'test' in html
    True
    >>> 'Error' in html
    False
    >>> 'Valid' in html
    True

The edit form for the Workspace should work.
::

    >>> testform = browser.WorkspaceEditForm(
    ...     self.portal.workspace.test, request)
    >>> html = testform()
    >>> 'Title' in html
    True
    >>> 'Description' in html
    True

Let's try to edit the Workspace with that form.
::

    >>> request = TestRequest(
    ...     form={
    ...         'form.widgets.title': u'Delicious Eggs',
    ...         'form.widgets.description': u'Test\nWorkspace',
    ...         'form.widgets.storage': [u'dummy_storage'],
    ...         'form.buttons.apply': 1,
    ...     })
    >>> testform = browser.WorkspaceEditForm(
    ...     self.portal.workspace.test, request)
    >>> testform.update()

Workspace is updated.
::

    >>> self.portal.workspace.test.title
    u'Delicious Eggs'
    >>> self.portal.workspace.test.description
    u'Test\nWorkspace'

Now we if try to create the ham workspace object using the 
WorkspaceStorageCreateForm, it will fail because the ham Storage object
already exists.
::

    >>> request = TestRequest(
    ...     form={
    ...         'form.widgets.id': u'ham',
    ...         'form.widgets.name': u'Tasty Ham',
    ...         'form.widgets.storage': [u'dummy_storage'],
    ...         'form.buttons.add': 1,
    ...     })
    ... 
    >>> testform = browser.WorkspaceStorageCreateForm(
    ...     self.portal.workspace, request)
    >>> html = testform()
    >>> 'A previous workspace' in html
    True

In this case, we need to use the standard add form which only creates
the workspace object and not the storage.
::

    >>> testform = browser.WorkspaceAddForm(
    ...     self.portal.workspace, request)
    >>> testform.update()

There should now be no repository objects without its respective
Workspace object.
::

    >>> html = repolist_page()
    >>> 'ham' in html
    True
    >>> 'Not Found' in html
    False

We can create a completely new workspace using the form we failed to use
earlier.
::

    >>> request = TestRequest(
    ...     form={
    ...         'form.widgets.id': u'cake',
    ...         'form.widgets.title': u'Delicious Cake',
    ...         'form.widgets.storage': [u'dummy_storage'],
    ...         'form.buttons.add': 1,
    ...     })
    ... 
    >>> testform = browser.WorkspaceStorageCreateForm(
    ...     self.portal.workspace, request)
    >>> testform.update()
    >>> self.portal.workspace.cake.title == u'Delicious Cake'
    True
    >>> self.portal.workspace.cake.storage == u'dummy_storage'
    True

Make sure the storage behind this workspace is set up.
::

    >>> import zope.component
    >>> from pmr2.app.workspace.interfaces import IStorage
    >>> cake = self.portal.workspace.cake
    >>> cake_store = zope.component.queryAdapter(cake, IStorage)
    >>> cake_store.file('status') == 'is a lie.'
    True

See if the page renders with expected output.
::

    >>> request = TestRequest()
    >>> testpage = browser.FileInfoPage(
    ...     self.portal.workspace.cake, request)
    >>> testpage.update()
    >>> result = testpage()
    >>> 'Location: Delicious Cake @ 0 /' in result
    True
    >>> '<th>Filename</th>' in result
    True
    >>> 'status' in result
    True

The log page should render, too.
::

    >>> request = TestRequest()
    >>> testpage = browser.WorkspaceLog(
    ...     self.portal.workspace.cake, request)
    >>> result = testpage()
    >>> '<th>Log</th>' in result
    True

Now the short log page should render, too.
::

    >>> request = TestRequest()
    >>> testpage = browser.WorkspaceShortlog(
    ...     self.portal.workspace.cake, request)
    >>> result = testpage()
    >>> '<th>Log</th>' in result
    True

There is an RSS page for the log, it should render correctly.
::

    >>> request = TestRequest()
    >>> testpage = browser.WorkspaceLogRss(
    ...     self.portal.workspace.test, request)
    >>> items = list(testpage.items())
    >>> items[0]['pubDate'] == 'Fri, 18 Mar 2005 23:12:19 +0000'
    True
    >>> result = testpage()
    >>> print result
    <?xml version="1.0" encoding="utf-8"?>
    <rss version="2.0">
      <channel>
        <link>http://nohost/plone/workspace/test</link>
        <language>en-us</language>
        <title>Delicious Eggs</title>
        <description>Test
    Workspace</description>
    ...
        <item>
          <title>A:dir1/f1</title>
          <link>http://nohost/plone/workspace/test/@@file/2</link>
          <description>A:dir1/f1
    A:dir1/f2
    C:file3
    D:file1</description>
          <author>&amp;#112;&amp;#109;...
          <pubDate>Fri, 18 Mar 2005 20:27:43 +0000</pubDate>
        </item>
    ...
    </rss>


Main page should render fine, too.
::

    >>> request = TestRequest()
    >>> testpage = browser.WorkspacePage(
    ...     self.portal.workspace.cake, request)
    >>> result = testpage()
    >>> '<th>Log</th>' in result
    True

Subdirectories should work along with a subpath to access the 
subdirectories in place, and we do need a proper revision for the
request_subpath.
::

    >>> wkspc = self.portal.workspace.test
    >>> request = TestRequest()
    >>> request['rev'] = '2'
    >>> request['request_subpath'] = ['dir1']
    >>> testpage = browser.FileInfoPage(wkspc, request)
    >>> testpage.update()
    >>> result = testpage()
    >>> 'Location: Delicious Eggs @ 2 / dir1' in result
    True
    >>> 'f1' in result
    True
    >>> 'f2' in result
    True

Nested works too.
::

    >>> wkspc = self.portal.workspace.test
    >>> request = TestRequest()
    >>> request['rev'] = '3'
    >>> request['request_subpath'] = ['dir1', 'dir2']
    >>> testpage = browser.FileInfoPage(wkspc, request)
    >>> testpage.update()
    >>> result = testpage()
    >>> 'Location: Delicious Eggs @ 3 / dir1 / dir2' in result
    True
    >>> 'f1' in result
    True
    >>> 'f2' in result
    True

Bad revision results in not found.
::

    >>> request = TestRequest()
    >>> request['rev'] = '1010'
    >>> request['request_subpath'] = ['dir1']
    >>> testpage = browser.FileInfoPage(wkspc, request)
    >>> testpage.update()
    Traceback (most recent call last):
    ...
    HTTPNotFound: 404 Not Found
    ...

As well as non-existent files at a specific revision.
::

    >>> request = TestRequest()
    >>> request['rev'] = '1'
    >>> request['request_subpath'] = ['dir1']
    >>> testpage = browser.FileInfoPage(wkspc, request)
    >>> testpage.update()
    Traceback (most recent call last):
    ...
    HTTPNotFound: 404 Not Found
    ...

--------------
File rendering
--------------

As there are many different file types that will be stored, it will
greatly benefit the users if the important ones can be rendered in
specific ways.  Images could be rendered and files can be shown with
syntax highlighted.

While the Exposure File Annotations achieved this, it requires an
exposure to be generated first.  The annotators can also be used here to
provide alternate views to workspace files if the correct adapters are
registered.

Here is a test of basic rendering:
::

    >>> subpath = ['1', 'file1']
    >>> page = self.traverse(wkspc, browser.FileInfoPage, subpath)
    >>> result = page()
    >>> 'file1-rev1\nThis test has changed.\n' in result
    True

There may be binary types which will not render properly by clients.
The view should not render it.
::

    >>> subpath = ['0', 'null']
    >>> page = self.traverse(
    ...     self.portal.workspace.cake, browser.FileInfoPage, subpath)
    >>> result = page()
    >>> '\0' in result
    False
    >>> 'application/octet-stream' in result
    True

Invalid revision should raise a 404.
::

    >>> subpath = ['110', 'null']
    >>> page = self.traverse(
    ...     self.portal.workspace.cake, browser.FileInfoPage, subpath)
    >>> result = page()
    Traceback (most recent call last):
    ...
    HTTPNotFound: 404 Not Found
    ...

As well as invalid file entries.
::

    >>> subpath = ['0', 'nullnull']
    >>> page = self.traverse(
    ...     self.portal.workspace.cake, browser.FileInfoPage, subpath)
    >>> result = page()
    Traceback (most recent call last):
    ...
    HTTPNotFound: 404 Not Found
    ...

Or traversing down a file as if a directory
::

    >>> subpath = ['0', 'null', 'null']
    >>> page = self.traverse(
    ...     self.portal.workspace.cake, browser.FileInfoPage, subpath)
    >>> result = page()
    Traceback (most recent call last):
    ...
    HTTPNotFound: 404 Not Found
    ...

---------------
Raw File Viewer
---------------

It must also be possible to directly download or otherwise view a file
that is stored within the workspace as is.  

We reuse the path in the previous example, but this time the view will
return just the contents.
::

    >>> subpath = ['1', 'file1']
    >>> page = self.traverse(wkspc, browser.WorkspaceRawfileView, subpath)
    >>> page.update()
    >>> page()
    'file1-rev1\nThis test has changed.\n'
    >>> page.request.response.getHeader('Content-length')
    '34'
    >>> page.request.response.getHeader('Content-type').startswith(
    ...     'text/plain')
    True

Binary data will be returned as is.
::

    >>> subpath = ['0', 'null']
    >>> page = self.traverse(
    ...     self.portal.workspace.cake, browser.WorkspaceRawfileView, subpath)
    >>> page() == '\0'
    True

Invalid revision should raise a 404.
::

    >>> subpath = ['110', 'null']
    >>> page = self.traverse(
    ...     self.portal.workspace.cake, browser.WorkspaceRawfileView, subpath)
    >>> result = page()
    Traceback (most recent call last):
    ...
    HTTPNotFound: 404 Not Found
    ...

As well as invalid file entries.
::

    >>> subpath = ['0', 'nullnull']
    >>> page = self.traverse(
    ...     self.portal.workspace.cake, browser.WorkspaceRawfileView, subpath)
    >>> result = page()
    Traceback (most recent call last):
    ...
    HTTPNotFound: 404 Not Found
    ...

Or traversing down a file as if a directory.
::

    >>> subpath = ['0', 'null', 'null']
    >>> page = self.traverse(
    ...     self.portal.workspace.cake, browser.WorkspaceRawfileView, subpath)
    >>> result = page()
    Traceback (most recent call last):
    ...
    HTTPNotFound: 404 Not Found
    ...

Obviously, this view cannot render directories at all.  Instead of 
throwing an error we redirect to the FileInfo view.
::

    >>> subpath = ['0']
    >>> page = self.traverse(
    ...     self.portal.workspace.cake, browser.WorkspaceRawfileView, subpath)
    >>> page()
    Traceback (most recent call last):
    ...
    HTTPFound: 302 Found
    The resource was found at
    http://nohost/plone/workspace/cake/file/0

This should work for nested directories.
::

    >>> subpath = ['3', 'dir1', 'dir2']
    >>> page = self.traverse(
    ...     self.portal.workspace.test, browser.WorkspaceRawfileView, subpath)
    >>> page()
    Traceback (most recent call last):
    ...
    HTTPFound: 302 Found
    The resource was found at
    http://nohost/plone/workspace/test/file/3/dir1/dir2
