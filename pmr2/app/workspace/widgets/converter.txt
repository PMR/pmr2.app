Converter
=========

This is a basic set of tests for a slightly customized SequenceConverter
for usage with fields of StorageFileChoice.  To demonstrate the 
converter, first instantiate the desired values.
::

    >>> from zope.schema.vocabulary import SimpleVocabulary
    >>> from z3c.form import widget
    >>> from pmr2.testing.base import TestRequest
    >>> from pmr2.app.workspace.schema import StorageFileChoice
    >>> from pmr2.app.workspace.widgets import converter
    >>>
    >>> files = StorageFileChoice(
    ...     vocabulary = SimpleVocabulary([
    ...         SimpleVocabulary.createTerm('file1', 'file1', u'file1'),
    ...         SimpleVocabulary.createTerm('file2', 'file2', u'file2'),
    ...     ]) )
    >>> seqWidget = widget.SequenceWidget(TestRequest())
    >>> seqWidget.field = files

We now use the field and widget to instantiate the converter:
::

    >>> sdv = converter.StorageFileSequenceDataConverter(files, seqWidget)

We can now convert a real value to a widget value as it were before.
::

    >>> sdv.toWidgetValue('file1')
    ['file1']

Values that don't exist within the vocabulary will also be converted for
display by the widget.
::

    >>> sdv.toWidgetValue('file3')
    ['file3']

The reverse should work for values that are present in the vocabulary.
::

    >>> sdv.toFieldValue(['file1'])
    'file1'

However, instead of throwing a LookupError if the value is not present,
wrap the exception around one that the update method of the widget will
catch.
::

    >>> sdv.toFieldValue(['file3'])
    Traceback (most recent call last):
    ...
    FormatterValidationError: (u'The selected path is invalid as it does 
    not exist within this revision.', LookupError('file3',))
