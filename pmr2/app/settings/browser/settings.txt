Global Settings
===============

Just to show that the method works
::

    >>> from pmr2.app.settings.interfaces import IPMR2GlobalSettings
    >>> from zope.component import getUtility
    >>> pmr2_settings = getUtility(IPMR2GlobalSettings)
    >>> pmr2_settings
    <pmr2.app.settings.settings.PMR2GlobalSettingsAnnotation object ...>
    >>> 'pmr2' in pmr2_settings.repo_root
    True

Also that the edit form actually works on the gloabl settings.  Note
how pmr2_settings created from above is not acquired again.
::

    >>> from pmr2.app.settings.browser import PMR2GlobalSettingsEditForm
    >>> from pmr2.testing.base import TestRequest
    >>> request = TestRequest(
    ...     form={
    ...         'form.widgets.repo_root': self.tmpdir,
    ...         'form.widgets.default_workspace_subpath': u'workspace',
    ...         'form.widgets.user_workspace_subpath': u'w',
    ...         'form.widgets.workspace_idgen': [],
    ...         'form.widgets.default_exposure_subpath': u'exposure',
    ...         'form.widgets.default_exposure_idgen': 'rand128hex',
    ...         'form.widgets.create_user_workspace': [u'false'],
    ...         'form.buttons.apply': 1,
    ...     })
    >>> f = PMR2GlobalSettingsEditForm(self.portal, request)
    >>> result = f()
    >>> pmr2_settings.repo_root == self.tmpdir
    True

The methods that compute/return path should return one.
::

    >>> pmr2_settings.dirOf() == self.tmpdir
    True
    >>> pmr2_settings.dirCreatedFor() == self.tmpdir
    True

The portal object can have a path, however it does not exist yet.
::

    >>> from os.path import join
    >>> result = pmr2_settings.dirOf(self.portal)
    >>> portal_path = join(self.tmpdir, self.portal.id)
    >>> result == portal_path
    True
    >>> pmr2_settings.dirCreatedFor(self.portal) is None
    True

This utility can create a path for a specific object.
::

    >>> result = pmr2_settings.createDir(self.portal)
    >>> result == portal_path
    True
    >>> pmr2_settings.dirCreatedFor(self.portal) == portal_path
    True

As the container objects do not exist yet, the form provides another
action which site managers can used to create them.
::

    >>> request = TestRequest(
    ...     form={
    ...         'form.widgets.repo_root': self.tmpdir,
    ...         'form.widgets.default_workspace_subpath': u'workspace',
    ...         'form.widgets.user_workspace_subpath': u'w',
    ...         'form.widgets.workspace_idgen': [],
    ...         'form.widgets.default_exposure_subpath': u'exposure',
    ...         'form.widgets.default_exposure_idgen': 'rand128hex',
    ...         'form.widgets.create_user_workspace': [u'false'],
    ...         'form.buttons.apply_and_create': 1,
    ...     })
    >>> f = PMR2GlobalSettingsEditForm(self.portal, request)
    >>> result = f()

Now we can test the method that returns the workspace container object 
specified as the default.
::

    >>> result = pmr2_settings.getWorkspaceContainer()
    >>> result == self.portal.workspace
    True

Directory should have been created on the filesystem.
::

    >>> pmr2_settings.dirCreatedFor(self.portal.workspace) is not None
    True

One exists for exposure container also.
::

    >>> result = pmr2_settings.getExposureContainer()
    >>> result == self.portal.exposure
    True

Exposures don't have any filesystem components so no directory should 
have been created.
::

    >>> pmr2_settings.dirCreatedFor(self.portal.exposure) is None
    True

There is a method to allow user workspace creation.  Since the default
setting is disabled, nothing should have happened.
::

    >>> from Products.ATContentTypes.content.folder import ATFolder
    >>> from Products.PloneTestCase.setup import default_user
    >>> self.portal['w'] = ATFolder('w')
    >>> userid = default_user
    >>> pmr2_settings.createUserWorkspaceContainer(userid)
    >>> userid in self.portal.w
    False

Of course there is a way to override this.
::

    >>> pmr2_settings.createUserWorkspaceContainer(userid, True)
    >>> userwc = self.portal.w[userid]
    >>> userwc
    <WorkspaceContainer at /plone/w/...>
    >>> userwc.id == default_user
    True
    >>> pmr2_settings.dirCreatedFor(userwc) is not None
    True

The method `getWorkspaceContainer` also can be specified to return a
specific user's workspace container.
::

    >>> result = pmr2_settings.getWorkspaceContainer(userid)
    >>> userwc == result
    True

A method is also provided to quickly retrieve the current user's
container,  but only if the option specifying that is enabled.
::

    >>> result = pmr2_settings.getCurrentUserWorkspaceContainer()
    >>> userwc == result
    False
    >>> pmr2_settings.create_user_workspace = True
    >>> result = pmr2_settings.getCurrentUserWorkspaceContainer()
    >>> result == userwc
    True

Attempt recreation of the WorkspaceContainer will not result in an error
as this can be configured to be called every time a user logs in via
the event subscriber.
::

    >>> pmr2_settings.createUserWorkspaceContainer(userid, True)

If the default paths are set wrong resulting in an unexpected object,
execption happens.
::

    >>> pmr2_settings.default_workspace_subpath = u'exposure'
    >>> pmr2_settings.getWorkspaceContainer()
    Traceback (most recent call last):
    ...
    TypeError: the content ... is not a workspace container

-----------
Subsettings
-----------

Modules may have their own settings.  Since they are probably trivial
and in the interest to keep pollution away from the global space, we
define a dictionary within our setting object that will hold these other
settings.  Our form will also render these fields so repository admins
can have a single form where all trivial settings for plugins can be
edited.

In order for plugins to take advantage of the subgroups, it has to first
define the interface and persistent object and set up the utility that
will fetch the setting object.
::

    >>> import zope.component
    >>> import zope.interface
    >>> import zope.schema
    >>> from persistent import Persistent
    >>> from pmr2.app.settings.interfaces import IPMR2PluggableSettings
    >>> from pmr2.app.settings import settings_factory
    >>> from pmr2.app.factory import named_factory
    >>> class IPluginSetting(zope.interface.Interface):
    ...     dummy = zope.schema.TextLine(title=u'Dummy',)
    ...
    >>> class PluginSetting(Persistent):
    ...     zope.interface.implements(IPluginSetting)
    ...     zope.component.adapts(IPMR2GlobalSettings)
    ...     title = u'Plugin Settings'
    ...     dummy = zope.schema.fieldproperty.FieldProperty(
    ...         IPluginSetting['dummy'])
    ...
    >>> PluginSettingFactory = settings_factory(PluginSetting, 
    ...                                         'pluginsetting')
    >>> zope.component.provideAdapter(PluginSettingFactory)
    >>> sm = zope.component.getSiteManager()
    >>> sm.registerUtility(PluginSettingFactory, IPMR2PluggableSettings,
    ...     name='pluginsetting')

Now we get the pluggable settings utility with the same name, 
instantiate against the global settings object to get back our data.

While the actual class/data can be directly accessed through the 
internal subsettings dictionary, it's best to do it through this method
via the component registry for consistency (much like zope annotations).
::

    >>> ps = IPluginSetting(pmr2_settings)
    >>> ps
    <PluginSetting ...>
    >>> ps.title
    u'Plugin Settings'
    >>> ps.dummy = u'Test value'

Now we have the settings object defined, the settings editor form should
have this newly adpated setting class rendered along with this value.
::

    >>> from pmr2.app.settings.browser import PMR2GlobalSettingsEditForm
    >>> from pmr2.testing.browser import GroupTemplate
    >>> request = TestRequest()
    >>> f = PMR2GlobalSettingsEditForm(self.portal, request)
    >>> f.template = GroupTemplate(f)
    >>> result = f()
    >>> u'Test value' in result
    True

Try to update the value.
::

    >>> request = TestRequest(
    ...     form={
    ...         'form.widgets.repo_root': self.tmpdir,
    ...         'form.widgets.default_workspace_subpath': u'workspace',
    ...         'form.widgets.user_workspace_subpath': u'w',
    ...         'form.widgets.workspace_idgen': [],
    ...         'form.widgets.default_exposure_subpath': u'exposure',
    ...         'form.widgets.default_exposure_idgen': 'rand128hex',
    ...         'form.widgets.create_user_workspace': [u'false'],
    ...         'form.widgets.pluginsetting.dummy': u'SMRT',
    ...         'form.buttons.apply': 1,
    ...     })
    >>> f = PMR2GlobalSettingsEditForm(self.portal, request)
    >>> result = f()
    >>> ps.dummy
    u'SMRT'
