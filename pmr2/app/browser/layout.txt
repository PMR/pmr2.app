Layout
======

We are using plone.z3cform to wrap our forms here primarily due to the
nice separation of concern it provides (i.e. keeping Acquistion, Plone
functions and other things away from the core of the content we intend
to render).  Since the default layout.pt provided is very basic, there
are extension added default layout module.

To test our extensions, we borrowed some preparation code from
plone.z3cform and added some more dummies of our own.
::

    >>> from zope.interface import alsoProvides
    >>> from zope.interface import Interface, implements
    >>> from zope.publisher.browser import TestRequest
    >>> from zope.annotation.interfaces import IAttributeAnnotatable
    >>> from z3c.form.interfaces import IFormLayer
    >>> 
    >>> def make_request(form={}):
    ...     request = TestRequest()
    ...     request.form.update(form)
    ...     alsoProvides(request, IFormLayer)
    ...     alsoProvides(request, IAttributeAnnotatable)
    ...     return request
    ...

Now we build our adapters.
::

    >>> from zope.component import provideAdapter
    >>> from zope.component import getMultiAdapter
    >>> from zope.publisher.interfaces.browser import IBrowserRequest
    >>> from zope.interface import Interface
    >>> from pmr2.app.browser.layout import PlainLayoutWrapper
    >>> from pmr2.app.browser.layout import MathMLLayoutWrapper
    >>> from pmr2.app.workspace.content import Workspace
    >>> 
    >>> provideAdapter(adapts=(Interface, IBrowserRequest),
    ...                provides=Interface,
    ...                factory=PlainLayoutWrapper,
    ...                name=u"plain-layout")
    ... 
    >>> provideAdapter(adapts=(Interface, IBrowserRequest),
    ...                provides=Interface,
    ...                factory=MathMLLayoutWrapper,
    ...                name=u"mathml-layout")
    ... 

Then we can test that the adapter will generally work.
::

    >>> context = self.portal
    >>> request = make_request()
    >>> plain = getMultiAdapter((context, request), name=u"plain-layout")
    >>> plain
    <pmr2.app.browser.layout.PlainLayoutWrapper object ...>
    >>> mathml = getMultiAdapter((context, request), name=u"mathml-layout")
    >>> mathml
    <pmr2.app.browser.layout.MathMLLayoutWrapper object ...>

We need to figure out how to test the rendering of the above.
