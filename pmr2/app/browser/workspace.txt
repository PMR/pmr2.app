=========================================
Workspace Related Objects and Their Forms
=========================================

Before we get started, we need to import the required classes and set up
the test environment.
::

    >>> from pmr2.app.browser import workspace
    >>> from pmr2.app.tests.base import TestRequest
    >>> from plone.z3cform.tests import setup_defaults
    >>> setup_defaults()
    >>> request = TestRequest()
    >>> from pmr2.app.content import *
    >>> self.folder['repo'] = PMR2('repo')
    >>> self.folder.repo['workspace'] = WorkspaceContainer()
    >>> self.folder.repo.workspace
    <WorkspaceContainer at ...repo/workspace>
    >>> self.folder.repo.workspace['eggs'] = Workspace('eggs')
    >>> self.folder.repo.workspace.eggs
    <Workspace at ...repo/workspace/eggs>

We will test the Repository Listing form first.  As the root object is
not configured, the listing will raise an exception which should not be
passed to the client.
::

    >>> repolist_page = workspace.WorkspaceContainerRepoListing(
    ...     self.folder.repo.workspace, request)
    >>> html = repolist_page()
    >>> 'Repository Path is undefined.' in html
    True

The edit form for the Workspace should work.
::

    >>> testform = workspace.WorkspaceEditForm(
    ...     self.folder.repo.workspace.eggs, request)
    >>> html = testform()
    >>> 'Title' in html
    True
    >>> 'Description' in html
    True

Let's try to edit the Workspace with that form.
::

    >>> request = TestRequest(
    ...     form={
    ...         'form.widgets.title': u'Delicious Eggs',
    ...         'form.widgets.description': u'Test\nWorkspace',
    ...         'form.buttons.apply': 1,
    ...     })
    >>> testform = workspace.WorkspaceEditForm(
    ...     self.folder.repo.workspace.eggs, request)
    >>> testform.update()

Workspace is updated
::

    >>> self.folder.repo.workspace.eggs.title
    u'Delicious Eggs'
    >>> self.folder.repo.workspace.eggs.description
    u'Test\nWorkspace'

Now if we defined a temporary directory.  However, the workspace path
has not been created yet.
::

    >>> self.folder.repo.repo_root = self.tmpdir
    >>> self.folder.repo.repo_root == self.tmpdir
    True
    >>> repolist_page = workspace.WorkspaceContainerRepoListing(
    ...     self.folder.repo.workspace, request)
    >>> html = repolist_page()
    >>> 'Repository Path is undefined.' in html
    False
    >>> 'Workspace path is missing.' in html
    True

Once the required paths are created on the file system, the raw 
repository listing should render fine.
::

    >>> from pmr2.app.tests import utils
    >>> utils.mkreporoot(self.folder.repo.repo_root)
    >>> html = repolist_page()
    >>> 'eggs' in html
    True
    >>> 'Error' in html
    True
    >>> 'Valid' in html
    False

As the VCS instances are added to the file system, they should also
show up on the form.
::

    >>> utils.mkrepo(self.folder.repo.workspace.get_path(), 'ham')
    >>> html = repolist_page()
    >>> 'ham' in html
    True
    >>> 'Not Found' in html
    True

Now we create the repository for eggs.  It should no longer appear 
broken.
::

    >>> utils.mkrepo(self.folder.repo.workspace.get_path(), 'eggs')
    >>> html = repolist_page()
    >>> 'eggs' in html
    True
    >>> 'Error' in html
    False
    >>> 'Valid' in html
    True

Now we create the ham workspace object using the WorkspaceAddForm.
::

    >>> request = TestRequest(
    ...     form={
    ...         'form.widgets.id': u'ham',
    ...         'form.widgets.name': u'Tasty Ham',
    ...         'form.buttons.add': 1,
    ...     })
    ... 
    >>> testform = workspace.WorkspaceAddForm(
    ...     self.folder.repo.workspace, request)
    >>> testform.update()

There should now be no repository objects without its respective
Workspace object.
::

    >>> html = repolist_page()
    >>> 'ham' in html
    True
    >>> 'Not Found' in html
    False
