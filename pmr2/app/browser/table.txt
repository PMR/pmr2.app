==============
Tables in PMR2
==============

------------
Introduction
------------

The z3c.table module is used to generate tables for PMR2.  A number of
predefined columns and tables exist in this class that are used for the
various types of output that will be generated by the classes we use.
Here we first import the modules and create required objects.
::

    >>> from zope.publisher.browser import TestRequest
    >>> from z3c.table.column import addColumn
    >>> from z3c.table.table import SequenceTable
    >>> from pmr2.app.browser import table
    >>> request = TestRequest()

--------------
Parent Columns
--------------

There are a number of specialized column types that can be subclassed in
this module.  Here we demonstrate how they are typically used.
::

    >>> class Column0(table.ItemKeyColumn):
    ...     itemkey = 0
    ...     header = 'zero'
    ...     errorValue = 'fail0'
    ...
    >>> class Column1(table.EscapedItemKeyColumn):
    ...     itemkey = 1
    ...     header = 'one'
    ...     errorValue = 'fail1'
    ...
    >>> class Column2(table.ItemKeyReplaceColumn):
    ...     itemkey = 'answer'
    ...     header = 'two'
    ...     errorValue = 'fail2'
    ...     defaultValue = 'default'
    ...     lookupTable = {True: 'yes', False: 'no'}
    ...
    >>> class Table1(SequenceTable):
    ...     sortOn = None
    ...     def setUpColumns(self):
    ...         return [
    ...             addColumn(self, Column0, 'zero'),
    ...             addColumn(self, Column1, 'one'),
    ...             addColumn(self, Column2, 'two'),
    ...         ]

Now create a list of data and render the table.  Note errorValue and
defaultValue have different meaning, one is an actual error from missing
value in input table, the latter is a default value for the lack of
entry in the lookup table.  The EscapeItemKeyColumn is used to sanitize
html output, otherwise html is rendered as is.
::

    >>> data = [
    ...     ['data1', 'data2', 'data3'],
    ...     {0: (1, -1), 'one': 'one', 'answer': True},
    ...     {0: 'zero', 1: '<email@localhost>', 'answer': None},
    ...     {0: object(), 1: object(), 'answer': False},
    ...     [],
    ... ]
    ... 
    >>> t = Table1(data, request)
    >>> t.update()
    >>> print t.render()
    <table>
      <thead>
        <tr>
          <th>zero</th>
          <th>one</th>
          <th>two</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>data1</td>
          <td>data2</td>
          <td>fail2</td>
        </tr>
        <tr>
          <td>(1, -1)</td>
          <td>fail1</td>
          <td>yes</td>
        </tr>
        <tr>
          <td>zero</td>
          <td>&lt;email@localhost&gt;</td>
          <td>default</td>
        </tr>
        <tr>
          <td><object object at ...></td>
          <td>&lt;object object at ...&gt;</td>
          <td>no</td>
        </tr>
        <tr>
          <td>fail0</td>
          <td>fail1</td>
          <td>fail2</td>
        </tr>
      </tbody>
    </table>

--------------------------------
Other Defined Columns and Tables
--------------------------------

WorkspaceContainer.get_repository_list returns data in a specific format
that we can render with WorkspaceStatusTable.
::

    >>> data = [('test0', True), ('test1', False), ('test2', None)]
    >>> t = table.WorkspaceStatusTable(data, request)
    >>> t.update()
    >>> print t.render()
    <table>
      <thead>
        <tr>
          <th>Workspace ID</th>
          <th>Object Status</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>test0</td>
          <td>Valid</td>
          <td><a ...</a></td>
        </tr>
        <tr>
          <td>test1</td>
          <td>Error</td>
          <td><a ...</a></td>
        </tr>
        <tr>
          <td>test2</td>
          <td>Not Found</td>
          <td><a ...</a></td>
        </tr>
      </tbody>
    </table>

The pmr2 storage libraries also return data in lists or generators.
We also have tables for them which we can test output with.
::

    >>> data = [
    ...     {
    ...         'date': (1, 0), 
    ...         'author': 'user <user@example.com>', 
    ...         'desc': 'a log',
    ...     },
    ...     {
    ...         'date': (2, 0), 
    ...         'author': 'user <user@example.com>', 
    ...         'desc': 'another log ><',
    ...     },
    ... ]
    ...
    >>> request = TestRequest()
    >>> t = table.ChangelogTable(data, request)
    >>> t.update()
    >>> print t.render()
    <table>
      <thead>
        <tr>
          <th>Changeset Date</th>
          <th>Author</th>
          <th>Log</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>(1, 0)</td>
          <td>user &lt;user@example.com&gt;</td>
          <td>a log</td>
        </tr>
        <tr>
          <td>(2, 0)</td>
          <td>user &lt;user@example.com&gt;</td>
          <td>another log &gt;&lt;</td>
        </tr>
      </tbody>
    </table>
