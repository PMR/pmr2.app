========================
Exposure Creation Wizard
========================

In an effort to streamline the exposure creation process, a wizard that
unifies the disparate forms (documentation, file type, annotations, 
rollover) into a unified form that can serve as the base form for users
to interact with.  This is based on the rollover interface and data
structure used in the rollover interface.  There are a few components,
which includes an annotation object on the exposure object containing a
work-in-progress exposure structure, the json export version of this 
item to allow more dynamic user experience, along with the javascript
interactive controls that interface with the underlying form.  The
structure would also need to be reused later if necessary, allowing the
user to regenerate the form or load a new exposure structure from the
objects created through other means.

To demonstrate, we initialize the set of imports.
::

    >>> from pprint import pprint
    >>> import zope.interface
    >>> import zope.component
    >>> from Products.CMFCore.utils import getToolByName
    >>> from pmr2.testing.base import TestRequest
    >>> from pmr2.app.interfaces import *
    >>> from pmr2.app.workspace.content import *
    >>> from pmr2.app.workspace.interfaces import *
    >>> from pmr2.app.exposure.content import *
    >>> from pmr2.app.exposure.interfaces import *

    >>> from pmr2.app.exposure.browser.browser import ExposurePort
    >>> from pmr2.app.exposure.browser import wizard
    >>> from pmr2.app.exposure.browser import workspace
    >>> pp = lambda x: pprint(x, indent=4, width=1)

We acquire an exposure object that's already been created.
::

    >>> context = self.portal.exposure['1']
    >>> context
    <Exposure at /plone/exposure/1>

Then adapt that into an exposure wizard, which provides some helper
methods and the place to store a work-in-progress exposure structure.
Currently it should be unintialized.
::

    >>> ewiz = zope.component.getAdapter(context, IExposureWizard)
    >>> IExposureWizard.providedBy(ewiz)
    True
    >>> ewiz.structure is None
    True

Render the wizard:
::

    >>> request = TestRequest()
    >>> context = self.portal.exposure['1']
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> result = form()

It should have initialized the wizard's structure.
::

    >>> len(ewiz.structure)
    1
    >>> ewiz.structure[0][0]
    ''

That form should be fairly unpopulated, with only the view gen group in
place.
::

    >>> len(form.groups)
    1
    >>> form.groups[0].fields.keys()
    ['docview_generator', 'docview_gensource']

Adding a file should succeed.

    >>> request = TestRequest(form={
    ...     'form.buttons.add_file': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> len(ewiz.structure)
    2
    >>> ewiz.structure[0]
    (None, {'file_type': None})
    >>> ewiz.structure[1]
    ('', {'commit_id': u'2', 'title': u'', 'curation': {}, 
    'workspace': u'/plone/workspace/test', 'docview_gensource': None, 
    'docview_generator': None, 'Subject': ()})

Alternatively, we can use the create exposure form to create our initial
exposure.
::

    >>> wkspc = self.portal.workspace.test
    >>> request = TestRequest(
    ...     form={
    ...         'file.widgets.filetype': 'Test Type',
    ...         'file.widgets.filename': 'file2',
    ...         'view.widgets.docview_generator': 'safe_html',
    ...         'view.widgets.docview_gensource': 'file2',
    ...         'form.buttons.add': 1,
    ...     })
    >>> form = workspace.CreateExposureForm(wkspc, request)
    >>> commit_id = '1'
    >>> form.traverse_subpath = [commit_id]
    >>> result = form()
    >>> context = form.ctxobj

Now instantiate the wizard form.  Once update is called, the groups will
be properly instantiated with the correct field entries created based on
the annotation specified.
::

    >>> request = TestRequest()
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> len(form.groups)
    2
    >>> form.groups[0].fields.keys()
    ['docview_generator', 'docview_gensource']
    >>> form.groups[1].fields.keys()
    ['filename']
    >>> len(form.groups[1].groups)
    2
    >>> form.groups[1].groups[0].fields.keys()
    ['edited_note.note']
    >>> form.groups[1].groups[1].fields.keys()
    ['post_edited_note.chars']

Rendering the form, using our customized test renderer based on the one
used on the live stack, the fields should be available and populated.
::

    >>> result = form.render()
    >>> 'edited_note.note' in result
    True
    >>> 'post_edited_note.chars' in result
    True

We should also be able to view this using the prepared TestBrowser
instance.
::

    >>> b = self.testbrowser
    >>> target = context.absolute_url() + '/@@wizard'
    >>> b.open(target)

Find that the update button for that subgroup is in place.
::

    >>> b.getControl(name='view.buttons.update')
    <SubmitControl name='view.buttons.update' type='submit'>

Validate the values for the root subform are correctly populated.
::

    >>> b.getControl(name='view.widgets.docview_generator:list').value
    ['safe_html']
    >>> b.getControl(name='view.widgets.docview_gensource:list').value
    ['file2']

The fields within the subgroups should have the fields correctly
instantiated and accessible by the browser.
::

    >>> b.getControl(name='annotate0.widgets.filename:list').value
    ['file2']
    >>> b.getControl(name='annotate0.widgets.edited_note.note').value
    ''
    >>> b.getControl(name='annotate0.widgets.post_edited_note.chars').value
    ''

-------------------------
Using the exposure wizard
-------------------------

Activating the update button the main view generator subform should
modify the structure represented by the wizard.
::

    >>> request = TestRequest(form={
    ...     'view.widgets.docview_generator': [u'rest_to_html'],
    ...     'view.widgets.docview_gensource': [u'file1'],
    ...     'view.buttons.update': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> len(form.groups)
    2
    >>> ewiz = zope.component.getAdapter(context, IExposureWizard)
    >>> ewiz.structure[-1][1]['docview_gensource'] == u'file1'
    True
    >>> ewiz.structure[-1][1]['docview_generator'] == u'rest_to_html'
    True
    >>> ewiz = zope.component.getAdapter(context, IExposureWizard)
    >>> len(ewiz.structure)
    2

Doing the same on the subgroup for the file should update that subgroup
only, even if the main view subgroup attributes are submitted.  Also,
the ordering specified in the file type must be maintained.
::

    >>> request = TestRequest(form={
    ...     'view.widgets.docview_generator': [u'safe_html'],
    ...     'view.widgets.docview_gensource': [u'file2'],
    ...     'annotate0.widgets.filename': [u'file2'],
    ...     'annotate0.widgets.edited_note.note': u'Testing',
    ...     'annotate0.widgets.post_edited_note.chars': u'2',
    ...     'annotate0.buttons.update': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> len(form.groups)
    2
    >>> ewiz = zope.component.getAdapter(context, IExposureWizard)
    >>> ewiz.structure[-1][1]['docview_gensource'] == 'file1'
    True
    >>> ewiz.structure[-1][1]['docview_generator'] == 'rest_to_html'
    True
    >>> ewiz.structure[0][1]['views'] == [
    ...     (u'edited_note', {'note': u'Testing'}),
    ...     (u'post_edited_note', {'chars': 2}),
    ...     (u'rot13', None),
    ... ]
    True

To add more files, select the add button.  This should spawn a new file
choice selection subgroup for the user to specify the file type.
::

    >>> request = TestRequest(form={
    ...     'form.buttons.add_file': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> ewiz.structure[1]
    (None, {'file_type': None})
    >>> len(ewiz.structure)
    3

Rendering should show a new group for the user to select the file type.
::

    >>> target = context.absolute_url() + '/@@wizard'
    >>> b.open(target)
    >>> b.getControl(name='file1.widgets.filename:list').value
    ['--NOVALUE--']
    >>> b.getControl(name='file1.widgets.filename:list').displayOptions
    ['no value', 'file1', 'file2', 'file3']
    >>> b.getControl(name='file1.widgets.filetype:list').value
    ['--NOVALUE--']
    >>> b.getControl(name='file1.widgets.filetype:list').displayOptions
    ['no value', 'Test Type']

We now update the form.
::

    >>> request = TestRequest(form={
    ...     'file1.widgets.filename': [u'file2'],
    ...     'file1.widgets.filetype': [u'Test Type'],
    ...     'file1.buttons.update': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> len(form.groups)
    3
    >>> ewiz = zope.component.getAdapter(context, IExposureWizard)
    >>> ewiz.structure[1][0] == u'file2'
    True
    >>> ewiz.structure[1][1]['views'] == [
    ...     (u'edited_note', None),
    ...     (u'post_edited_note', None),
    ...     (u'rot13', None),
    ... ]
    True

Can fill this out using the test browser.
::

    >>> b.open(target)
    >>> b.getControl(name='annotate1.widgets.filename:list').value = ['file3']
    >>> b.getControl(
    ...     name='annotate1.widgets.edited_note.note').value = 'Hi'
    >>> b.getControl(
    ...     name='annotate1.widgets.post_edited_note.chars').value = '1'
    >>> b.getControl(name='annotate1.buttons.update').click()
    >>> ewiz = zope.component.getAdapter(context, IExposureWizard)
    >>> ewiz.structure[1][0] == u'file3'
    True
    >>> ewiz.structure[1][1]['views'] == [
    ...     (u'edited_note', {'note': u'Hi'}),
    ...     (u'post_edited_note', {'chars': 1}),
    ...     (u'rot13', None),
    ... ]
    True

The subgroup within the wizard should be able to acquire the content 
object with the above selected values set.
::

    >>> request = TestRequest()
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> form.groups[2].groups[0].getContent().note
    u'Hi'
    >>> form.groups[2].groups[1].getContent().chars
    1

Now when we render the wizard again, those fields should have been 
selected.
::

    >>> b.open(target)
    >>> b.getControl(name='annotate1.widgets.filename:list').value
    ['file3']
    >>> b.getControl(name='annotate1.widgets.edited_note.note').value
    'Hi'
    >>> b.getControl(name='annotate1.widgets.post_edited_note.chars').value
    '1'

----------------------------------
Building the exposure using wizard
----------------------------------

Given that structure, we should be able to generate the exposure with
the build button.
::

    >>> request = TestRequest(form={
    ...     'form.buttons.build': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()

Now verify that the structure is equal to the one generated from the
export form.  For now we munge the data a bit for backwards
compatibility.
::

    >>> request = TestRequest()
    >>> porter = ExposurePort(context, request)
    >>> reference_result = list(porter.export())

    >>> result = list(porter.export())
    >>> answer = ewiz.structure

    >>> del result[0][1]['docview_gensource']
    >>> del result[0][1]['docview_generator']
    >>> del result[1][1]['docview_gensource']
    >>> del result[1][1]['docview_generator']

    >>> del result[0][1]['views'][1][1]['text']
    >>> del result[1][1]['views'][1][1]['text']

    >>> result[0][1]['Subject'] = list(result[1][1]['Subject'])
    >>> result[1][1]['Subject'] = list(result[1][1]['Subject'])

    >>> if not result == answer:
    ...     pp(answer)
    ...     pp(result)

-----------------
Reverting changes
-----------------

Users may decide to revert the wizard into the same state as the created
objects.  This will let them achieve it.
::

    >>> request = TestRequest(form={
    ...     'form.buttons.revert': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> result = list(porter.export())
    >>> answer = ewiz.structure
    >>> result == answer
    True

-------------------
User error handling
-------------------

Due to the lack of any constraints on the forms for maximum flexibility
for the users, sometimes subgroups may be empty or contain missing data.
The following attempts to cover some of the cases.

User leaving behind unfilled/empty add file groups should be ignored.
::

    >>> request = TestRequest(form={
    ...     'form.buttons.add_file': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> ewiz.structure[2]
    (None, {'file_type': None})
    >>> len(ewiz.structure)
    4
    >>> request = TestRequest(form={
    ...     'form.buttons.build': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()

    >>> request = TestRequest()
    >>> porter = ExposurePort(context, request)
    >>> result = list(porter.export())
    >>> result == reference_result
    True

Selecting just file should do nothing.
::

    >>> request = TestRequest(form={
    ...     'file2.widgets.filename': [u'file1'],
    ...     'file2.widgets.filetype': [],
    ...     'file2.buttons.update': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> ewiz = zope.component.getAdapter(context, IExposureWizard)
    >>> len(ewiz.structure)
    4
    >>> ewiz.structure[2]
    (None, {'file_type': None})
