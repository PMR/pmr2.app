========================
Exposure Creation Wizard
========================

In an effort to streamline the exposure creation process, a wizard that
unifies the disparate forms (documentation, file type, annotations, 
rollover) into a unified form that can serve as the base form for users
to interact with.  This is based on the rollover interface and data
structure used in the rollover interface.  There are a few components,
which includes an annotation object on the exposure object containing a
work-in-progress exposure structure, the json export version of this 
item to allow more dynamic user experience, along with the javascript
interactive controls that interface with the underlying form.  The
structure would also need to be reused later if necessary, allowing the
user to regenerate the form or load a new exposure structure from the
objects created through other means.

To demonstrate, we initialize the set of imports.
::

    >>> from pprint import pprint
    >>> import zope.interface
    >>> import zope.component
    >>> from Products.CMFCore.utils import getToolByName
    >>> from pmr2.testing.base import TestRequest
    >>> from pmr2.app.interfaces import *
    >>> from pmr2.app.workspace.content import *
    >>> from pmr2.app.workspace.interfaces import *
    >>> from pmr2.app.exposure.content import *
    >>> from pmr2.app.exposure.interfaces import *

    >>> from pmr2.app.exposure.browser import wizard
    >>> from pmr2.app.exposure.browser import workspace
    >>> pp = lambda x: pprint(x, indent=4, width=1)

We acquire an exposure object that's already been created.
::

    >>> context = self.portal.exposure['1']
    >>> context
    <Exposure at /plone/exposure/1>

Then adapt that into an exposure wizard, which provides some helper
methods and the place to store a work-in-progress exposure structure.
::

    >>> ewiz = zope.component.getAdapter(context, IExposureWizard)
    >>> IExposureWizard.providedBy(ewiz)
    True

Render the wizard:
::

    >>> request = TestRequest()
    >>> context = self.portal.exposure['1']
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> result = form()

That form should be fairly unpopulated, with only the view gen group in
place.
::

    >>> len(form.groups)
    1
    >>> form.groups[0].fields.keys()
    ['docview_generator', 'docview_gensource']

Alternatively, we can use the create exposure form to create our initial
exposure.
::

    >>> wkspc = self.portal.workspace.test
    >>> request = TestRequest(
    ...     form={
    ...         'file.widgets.filetype': 'Test Type',
    ...         'file.widgets.filename': 'file2',
    ...         'view.widgets.docview_generator': 'safe_html',
    ...         'view.widgets.docview_gensource': 'file2',
    ...         'form.buttons.add': 1,
    ...     })
    >>> form = workspace.CreateExposureForm(wkspc, request)
    >>> commit_id = '1'
    >>> form.traverse_subpath = [commit_id]
    >>> result = form()
    >>> context = form.ctxobj

Due to the way ploneform-macros is current set up, it is not possible to
override the default testing one.  Until we customize the entire testing
stack, to properly visualize the subgroups and to see them in action the
testbrowser must be used.  For now we resort to verifying the attributes
that should have been updated manually through the update methods.
::

    >>> request = TestRequest()
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> result = form()
    >>> len(form.groups)
    2
    >>> form.groups[0].fields.keys()
    ['docview_generator', 'docview_gensource']
    >>> form.groups[1].fields.keys()
    ['filename']
    >>> len(form.groups[1].groups)
    3
    >>> form.groups[1].groups[0].fields.keys()
    ['edited_note.note']
    >>> form.groups[1].groups[1].fields.keys()
    ['post_edited_note.chars']

Now we open the wizard using the prepared TestBrowser instance.
::

    >>> b = self.testbrowser
    >>> target = context.absolute_url() + '/@@wizard'
    >>> b.open(target)

Find that the update button for that subgroup is in place.
::

    >>> b.getControl(name='view.buttons.update')
    <SubmitControl name='view.buttons.update' type='submit'>

Validate the values for the root subform are correctly populated.
::

    >>> b.getControl(name='view.widgets.docview_generator:list').value
    ['safe_html']
    >>> b.getControl(name='view.widgets.docview_gensource:list').value
    ['file2']

Now we take a look at the first file sub group.
::

    >>> b.getControl(name='annotate0.widgets.filename:list').value
    ['file2']
    >>> b.getControl(name='annotate0.widgets.edited_note.note').value
    ''
    >>> b.getControl(name='annotate0.widgets.post_edited_note.chars').value
    ''

-------------------------
Using the exposure wizard
-------------------------

Activating the update button the main view generator subform should
modify the structure represented by the wizard.
::

    >>> request = TestRequest(form={
    ...     'view.widgets.docview_generator': [u'rest_to_html'],
    ...     'view.widgets.docview_gensource': [u'file1'],
    ...     'view.buttons.update': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> len(form.groups)
    2
    >>> ewiz = zope.component.getAdapter(context, IExposureWizard)
    >>> ewiz.structure[-1][1]['docview_gensource'] == 'file1'
    True
    >>> ewiz.structure[-1][1]['docview_generator'] == 'rest_to_html'
    True

Doing the same on the subgroup for the file should update that subgroup
only, even if the main view subgroup attributes are submitted.
::

    >>> request = TestRequest(form={
    ...     'view.widgets.docview_generator': [u'safe_html'],
    ...     'view.widgets.docview_gensource': [u'file2'],
    ...     'annotate0.widgets.filename': [u'file2'],
    ...     'annotate0.widgets.edited_note.note': u'Testing',
    ...     'annotate0.widgets.post_edited_note.chars': u'2',
    ...     'annotate0.buttons.update': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> len(form.groups)
    2
    >>> ewiz = zope.component.getAdapter(context, IExposureWizard)
    >>> ewiz.structure[-1][1]['docview_gensource'] == 'file1'
    True
    >>> ewiz.structure[-1][1]['docview_generator'] == 'rest_to_html'
    True
    >>> ewiz.structure[0][1]['views'] == [
    ...     (u'edited_note', [('note', u'Testing')]),
    ...     (u'post_edited_note', [('chars', 2)]),
    ...     (u'rot13', None),
    ... ]
    True
