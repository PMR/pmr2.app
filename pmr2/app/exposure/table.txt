===================
Tables in Exposures
===================

------------
Introduction
------------

Exposures introduces a number of additions on top of workspaces.  This
resulted in additional views which in turn provides new tables that will
be rendered.

-------
Columns
-------

One of the views that exposure provide for workspace is the exposure 
rollover view, where the structure of a previously created exposure is
rolled on top of a new revision within a workspace, thus all the files
with its original views are generated for this new revision, resulting
in a new exposure.  This view provides new columns, which we will test
below.

First we define a table that will render the column that returns
the revision id, along with the exposures of that id.
::

    >>> import zope.component
    >>> from pmr2.testing.base import TestRequest
    >>> from pmr2.app.workspace.interfaces import IStorage
    >>> from pmr2.app.workspace.table import IChangelogTable
    >>> from pmr2.app.exposure.table import ExposureColumn
    >>> from z3c.table import table, value, column
    >>>
    >>> class ExposureColumnTable(table.Table):
    ...     zope.interface.implements(IChangelogTable)
    ...     sortOn = None
    ...
    ...     def setUpColumns(self):
    ...         return [
    ...             column.addColumn(self, ExposureColumn, u'exposure'),
    ...         ]
    ...
    >>> request = TestRequest()
    >>> t = ExposureColumnTable(self.portal.workspace.test, request)
    >>> t.update()
    >>> print t.render()
    <table>
      <thead>
        <tr>
          <th>Exposure</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td></td>
        </tr>
        <tr>
          <td><a class="state-private" href="http://nohost/plone/exposure/1">1</a></td>
        </tr>
        <tr>
          <td></td>
        </tr>
        <tr>
          <td></td>
        </tr>
      </tbody>
    </table>

The other column adds in a series of radio buttons as the selection
widgets for the workspace rollover form.

Do note however, since we don't have an actual form, the columns revert
to using the default name for the radio buttons.
::

    >>> from pmr2.app.workspace.table import ChangesetRadioColumn
    >>> from pmr2.app.exposure.table import ExposureRadioColumn
    >>>
    >>> class ExposureColumnTable(table.Table):
    ...     zope.interface.implements(IChangelogTable)
    ...     sortOn = None
    ...
    ...     def setUpColumns(self):
    ...         return [
    ...             column.addColumn(self, ChangesetRadioColumn, u'commit_id'),
    ...             column.addColumn(self, ExposureRadioColumn, u'exposure_path'),
    ...         ]
    ...
    ...
    >>> request = TestRequest()
    >>> t = ExposureColumnTable(self.portal.workspace.test, request)
    >>> t.update()
    >>> print t.render()
    <table>
      <thead>
        <tr>
          <th>Changeset</th>
          <th>Exposure</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><label><input type="radio" class="radio-widget" name="table-commit_id-0-selectedItem" value="3"  /> 3</label></td>
          <td>(none)</td>
        </tr>
        <tr>
          <td><label><input type="radio" class="radio-widget" name="table-commit_id-0-selectedItem" value="2"  /> 2</label></td>
          <td><label><input type="radio" class="radio-widget" name="table-exposure_path-1-selectedItem" value="/plone/exposure/1"  /> <a class="state-private" href="http://nohost/plone/exposure/1">1</a></label></td>
        </tr>
        <tr>
          <td><label><input type="radio" class="radio-widget" name="table-commit_id-0-selectedItem" value="1"  /> 1</label></td>
          <td>(none)</td>
        </tr>
        <tr>
          <td><label><input type="radio" class="radio-widget" name="table-commit_id-0-selectedItem" value="0"  /> 0</label></td>
          <td>(none)</td>
        </tr>
      </tbody>
    </table>

There are times where selecting a value within the list of options
become necessary.  Since the exposure column has a number of dependency,
this can become complicated.  Here we test it.
::

    >>> column = ExposureRadioColumn(self.portal.workspace.test, request, None)
    >>> column.getItem({'node': '0'})
    []
    >>> column.getItemValue({'node': '0'})
    []

Now if we use a node with an exposure created, we should get something:
::

    >>> column = ExposureRadioColumn(self.portal.workspace.test, request, None)
    >>> column.getItem({'node': '2'})
    [<Products.ZCatalog.Catalog.mybrains ...>]
    >>> column.getItemValue({'node': '2'})
    ['/plone/exposure/1']

------
Tables
------

We reuse some tables that are provided in the workspace table module via
inheritance and new interfaces with column adapting to that.  We should
be able to instantiate the table like so:
::

    >>> from pmr2.app.exposure.table import ExposureRolloverLogTable
    >>> request = TestRequest()
    >>> tbl = ExposureRolloverLogTable(self.portal.workspace.test, request)
    >>> tbl.update()
    >>> print tbl.render()
    <table...
    ...
        <tr>
          <td><label><input type="radio" class="radio-widget" name="table-commit_id-0-selectedItem" value="2"  /> 2</label></td>
          ...
          <td><label><input type="radio" class="radio-widget" name="table-exposure_path-...-selectedItem" value="/plone/exposure/1"  /> <a class="state-private" href="http://nohost/plone/exposure/1">1</a></label></td>
        </tr>
    ...
